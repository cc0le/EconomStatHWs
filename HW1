{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Домашнее задание по эконометрике №1 ###\n",
    "\n",
    "#### Часть 1 ####\n",
    "\n",
    "**выполнили студенты группы БЭК1911: Скляров Сергей, Филиппов Семён**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Импортируем необходимые пакеты"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "from scipy.stats import t\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import scipy.stats as ss\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "from scipy import stats\n",
    "\n",
    "warnings.simplefilter(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Откроем файл с данными"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Порядковый номер</th>\n",
       "      <th>Название региона</th>\n",
       "      <th>Y, рост ВРП</th>\n",
       "      <th>X, рост бюджетных расходов на социальную политику</th>\n",
       "      <th>Валовый региональный продукт, в млн рублей, 2009 г.</th>\n",
       "      <th>Валовый региональный продукт, в млн рублей, 2010 г.</th>\n",
       "      <th>Расходы консолидированных бюджетов субъектов РФ на социальную политику, в млн рублей, 2009 г.</th>\n",
       "      <th>Расходы консолидированных бюджетов субъектов РФ на социальную политику, в млн рублей, 2010 г.</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Алтайский край</td>\n",
       "      <td>1.128390</td>\n",
       "      <td>1.306396</td>\n",
       "      <td>265613.3</td>\n",
       "      <td>299715.3</td>\n",
       "      <td>11271.7</td>\n",
       "      <td>14725.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Амурская область</td>\n",
       "      <td>1.187866</td>\n",
       "      <td>1.370812</td>\n",
       "      <td>151118.6</td>\n",
       "      <td>179508.7</td>\n",
       "      <td>6733.6</td>\n",
       "      <td>9230.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Архангельская область</td>\n",
       "      <td>1.086362</td>\n",
       "      <td>1.447535</td>\n",
       "      <td>193429.1</td>\n",
       "      <td>210134.1</td>\n",
       "      <td>8448.5</td>\n",
       "      <td>12229.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Астраханская область</td>\n",
       "      <td>1.081922</td>\n",
       "      <td>1.205040</td>\n",
       "      <td>134418.2</td>\n",
       "      <td>145430.0</td>\n",
       "      <td>4797.6</td>\n",
       "      <td>5781.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Белгородская область</td>\n",
       "      <td>1.304669</td>\n",
       "      <td>1.325207</td>\n",
       "      <td>304345.3</td>\n",
       "      <td>397069.9</td>\n",
       "      <td>6431.9</td>\n",
       "      <td>8523.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>79</td>\n",
       "      <td>Чеченская Республика</td>\n",
       "      <td>1.083464</td>\n",
       "      <td>0.854976</td>\n",
       "      <td>64308.3</td>\n",
       "      <td>69675.7</td>\n",
       "      <td>14386.6</td>\n",
       "      <td>12300.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>80</td>\n",
       "      <td>Чувашская Республика</td>\n",
       "      <td>1.089916</td>\n",
       "      <td>1.430879</td>\n",
       "      <td>139909.5</td>\n",
       "      <td>152489.6</td>\n",
       "      <td>4996.3</td>\n",
       "      <td>7149.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>81</td>\n",
       "      <td>Чукотский автономный округ</td>\n",
       "      <td>0.931361</td>\n",
       "      <td>1.145570</td>\n",
       "      <td>45067.6</td>\n",
       "      <td>41974.2</td>\n",
       "      <td>1195.3</td>\n",
       "      <td>1369.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>82</td>\n",
       "      <td>Ямало-Ненецкий автономный округ</td>\n",
       "      <td>1.187995</td>\n",
       "      <td>1.430747</td>\n",
       "      <td>649640.0</td>\n",
       "      <td>771769.0</td>\n",
       "      <td>8144.0</td>\n",
       "      <td>11652.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>83</td>\n",
       "      <td>Ярославская область</td>\n",
       "      <td>1.101380</td>\n",
       "      <td>1.301531</td>\n",
       "      <td>212684.4</td>\n",
       "      <td>234246.3</td>\n",
       "      <td>7896.7</td>\n",
       "      <td>10277.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>83 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Порядковый номер                 Название региона  Y, рост ВРП  \\\n",
       "0                  1                   Алтайский край     1.128390   \n",
       "1                  2                 Амурская область     1.187866   \n",
       "2                  3            Архангельская область     1.086362   \n",
       "3                  4             Астраханская область     1.081922   \n",
       "4                  5             Белгородская область     1.304669   \n",
       "..               ...                              ...          ...   \n",
       "78                79             Чеченская Республика     1.083464   \n",
       "79                80             Чувашская Республика     1.089916   \n",
       "80                81       Чукотский автономный округ     0.931361   \n",
       "81                82  Ямало-Ненецкий автономный округ     1.187995   \n",
       "82                83              Ярославская область     1.101380   \n",
       "\n",
       "    X, рост бюджетных расходов на социальную политику  \\\n",
       "0                                            1.306396   \n",
       "1                                            1.370812   \n",
       "2                                            1.447535   \n",
       "3                                            1.205040   \n",
       "4                                            1.325207   \n",
       "..                                                ...   \n",
       "78                                           0.854976   \n",
       "79                                           1.430879   \n",
       "80                                           1.145570   \n",
       "81                                           1.430747   \n",
       "82                                           1.301531   \n",
       "\n",
       "    Валовый региональный продукт, в млн рублей, 2009 г.  \\\n",
       "0                                            265613.3     \n",
       "1                                            151118.6     \n",
       "2                                            193429.1     \n",
       "3                                            134418.2     \n",
       "4                                            304345.3     \n",
       "..                                                ...     \n",
       "78                                            64308.3     \n",
       "79                                           139909.5     \n",
       "80                                            45067.6     \n",
       "81                                           649640.0     \n",
       "82                                           212684.4     \n",
       "\n",
       "    Валовый региональный продукт, в млн рублей, 2010 г.  \\\n",
       "0                                            299715.3     \n",
       "1                                            179508.7     \n",
       "2                                            210134.1     \n",
       "3                                            145430.0     \n",
       "4                                            397069.9     \n",
       "..                                                ...     \n",
       "78                                            69675.7     \n",
       "79                                           152489.6     \n",
       "80                                            41974.2     \n",
       "81                                           771769.0     \n",
       "82                                           234246.3     \n",
       "\n",
       "    Расходы консолидированных бюджетов субъектов РФ на социальную политику, в млн рублей, 2009 г.  \\\n",
       "0                                             11271.7                                               \n",
       "1                                              6733.6                                               \n",
       "2                                              8448.5                                               \n",
       "3                                              4797.6                                               \n",
       "4                                              6431.9                                               \n",
       "..                                                ...                                               \n",
       "78                                            14386.6                                               \n",
       "79                                             4996.3                                               \n",
       "80                                             1195.3                                               \n",
       "81                                             8144.0                                               \n",
       "82                                             7896.7                                               \n",
       "\n",
       "    Расходы консолидированных бюджетов субъектов РФ на социальную политику, в млн рублей, 2010 г.  \n",
       "0                                             14725.3                                              \n",
       "1                                              9230.5                                              \n",
       "2                                             12229.5                                              \n",
       "3                                              5781.3                                              \n",
       "4                                              8523.6                                              \n",
       "..                                                ...                                              \n",
       "78                                            12300.2                                              \n",
       "79                                             7149.1                                              \n",
       "80                                             1369.3                                              \n",
       "81                                            11652.0                                              \n",
       "82                                            10277.8                                              \n",
       "\n",
       "[83 rows x 8 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_excel('data.xlsx')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Оставим нужные столбцы и переименуем их"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['Y, рост ВРП', 'X, рост бюджетных расходов на социальную политику']]\n",
    "df.rename(columns={'Y, рост ВРП': 'Y'}, inplace=True)\n",
    "df.rename(columns={'X, рост бюджетных расходов на социальную политику': 'X'}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3. Найдем описательные статистики переменных X и Y**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>X</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.149313</td>\n",
       "      <td>1.285944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.065061</td>\n",
       "      <td>0.198719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.931361</td>\n",
       "      <td>0.854976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.111402</td>\n",
       "      <td>1.165811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.142968</td>\n",
       "      <td>1.283468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.180038</td>\n",
       "      <td>1.361108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.401716</td>\n",
       "      <td>1.970242</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Y          X\n",
       "count  83.000000  83.000000\n",
       "mean    1.149313   1.285944\n",
       "std     0.065061   0.198719\n",
       "min     0.931361   0.854976\n",
       "25%     1.111402   1.165811\n",
       "50%     1.142968   1.283468\n",
       "75%     1.180038   1.361108\n",
       "max     1.401716   1.970242"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4. Построим гистограммы распределения переменных X и Y**\n",
    "\n",
    "- Гистограмма X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10,6))\n",
    "sns.distplot(df[\"X\"])\n",
    "plt.xlabel('Изменение в %')\n",
    "plt.ylabel('Вероятность')\n",
    "plt.title('Гистограмма распределения X')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Гистограмма Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10,6))\n",
    "sns.distplot(df[\"Y\"], color='red')\n",
    "plt.xlabel('Изменение ВРП в %')\n",
    "plt.ylabel('Вероятность')\n",
    "plt.title('Гистограмма распределения Y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5. Проверим двустороннюю статистическую гипотезу, что математическое ожидание Y\n",
    "равно росту ВРП для Российской Федерации в 2010 году**\n",
    "\n",
    "32007228.1 и 37398520.1 - ВРП РФ в миллионах рублей в 2009 и 2010 году соответственно"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Рост ВРП РФ = 1.1684398281274473\n"
     ]
    }
   ],
   "source": [
    "rost = 37398520.1 / 32007228.1\n",
    "print('Рост ВРП РФ = ' + str(rost))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поскольку дисперсия неизвестна, используется t-распределение с 82 степенями свободы. Предполагаем, что 𝛼 = 5%, и строим 95 % доверительный интервал."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Математическое ожидание Y = 1.1493132462703546\n"
     ]
    }
   ],
   "source": [
    "y = np.array(df['Y'])                            # выборка\n",
    "n = len(y)                                       # объем выборки\n",
    "sigma = df['Y'].std()                            # стандартное отклонение, из описательной статистики\n",
    "y_mean = np.mean(y)                              # среднее выборочное\n",
    "a = 0.05                                         # квантиль\n",
    "mu = rost                                        # гипотеза о математичком ожидании\n",
    "print('Математическое ожидание Y = ' + str(y_mean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "доверительный интервал = [1.1351066752636438, 1.1635198172770653]\n"
     ]
    }
   ],
   "source": [
    "t1 = [y_mean - (sigma * t.ppf(1 - a / 2, df = n - 1) / n ** 0.5), y_mean + (sigma * t.ppf(1 - a / 2, df = n - 1) / n ** 0.5)] # доверительный интервал\n",
    "print('доверительный интервал = ' + str(t1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t рассчётное = -2.678258124434971\n"
     ]
    }
   ],
   "source": [
    "y_var = np.var(y, ddof = 1)                             # исправленная (скорректированная) выборочная дисперсия\n",
    "t_c = (y_mean - mu) / (y_var / n)**0.5                  # t рассчётное\n",
    "print('t рассчётное = ' + str(t_c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Гипотеза неверна\n"
     ]
    }
   ],
   "source": [
    "if t1[0] <= t_c <= t1[1]: print('Гипотеза верна')\n",
    "else: print('Гипотеза неверна')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6. Проверим одностороннюю статистическую гипотезу, что математическое ожидание X\n",
    "равно росту бюджетных расходов на социальную политику для Российской Федерации в 2010**\n",
    "\n",
    "958.4 и 1167.3 - расходы на социальную политику в милиардах рублей в 2009 и 2010 году соответственно"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Рост расходов = 1.2179674457429048\n"
     ]
    }
   ],
   "source": [
    "rost2 = 1167.3 / 958.4\n",
    "print('Рост расходов = ' + str(rost2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вновь используем t-распределение с 82 степенями свободы. Предполагаем, что 𝛼 = 5%, и снова строим 95 % доверительный интервал."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Математическое ожидание X = 1.285943928614782\n"
     ]
    }
   ],
   "source": [
    "x = np.array(df['X'])                            # выборка\n",
    "n = len(x)                                       # объем выборки\n",
    "sigma = df['X'].std()                            # стандартное отклонение, из описательной статистики\n",
    "x_mean = np.mean(x)                              # среднее выборочное\n",
    "a = 0.05                                         # квантиль\n",
    "mu = rost2                                       # гипотеза о математичком ожидании\n",
    "print('Математическое ожидание X = ' + str(x_mean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.2496560001622987 1.3222318570672653\n"
     ]
    }
   ],
   "source": [
    "t2 = x_mean - (sigma * t.ppf(1 - a, df = n - 1) / n ** 0.5) # правосторонний\n",
    "t3 = x_mean + (sigma * t.ppf(1 - a, df = n - 1) / n ** 0.5) # левосторонний\n",
    "print(t2, t3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.116436376561047\n"
     ]
    }
   ],
   "source": [
    "x_var = np.var(x, ddof = 1)                             # исправленная (скорректированная) выборочная дисперсия\n",
    "t_c = (x_mean - mu) / (x_var / n)**0.5                  # t рассчётное\n",
    "print(t_c)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Правосторонний доверительный интервал*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "гипотеза неверна\n"
     ]
    }
   ],
   "source": [
    "if t_c <= t2: print('гипотеза верна')\n",
    "else: print('гипотеза неверна')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Отвергаем гипотезу H_0 в закрашенной области\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(-6, 6, 1000)\n",
    "y = ss.t.pdf(x, n-1, loc = 0, scale = 1)\n",
    "plt.figure(figsize=(7,5))\n",
    "plt.axvline(t2, color='b', linestyle='--', label = 'граница ДИ')\n",
    "plt.axvline(t_c, color='r', linestyle='--', label = 't рассчётная')\n",
    "plt.legend()\n",
    "plt.plot(x, y)\n",
    "\n",
    "xr_fill = np.linspace(t2, 6)\n",
    "yr_fill = ss.t(n-1,0, 1).pdf(xr_fill)\n",
    "plt.fill_between(xr_fill,0, yr_fill) \n",
    "print('Отвергаем гипотезу H_0 в закрашенной области')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Левосторонний доверительный интервал*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "гипотеза верна\n"
     ]
    }
   ],
   "source": [
    "if t3 <= t_c: print('гипотеза верна')\n",
    "else: print('гипотеза неверна')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Отвергаем гипотезу H_0 в закрашенной области\n"
     ]
    },
    {
     "data": {
      "image/png": "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9czLL3slVLKg0tu2bUt7axrgmmuuSXjfF198kaOOOirh91NNiVokJFpjcf7r7+vp18NHrxpaorxXVs8fF29LTWAiAVNQUNDpnNxdvZ9qStQiIfFoUQk7KhtojvasZRx33iNbv321mPrmaIqiE5GuKFGLhEBTa4y7Xn6Pwf1ye3V8VUMr1Q2talWL+ECJWiQEHlsaYU9tM/XNvX8uemBBLve9viUwz1aPGuWVUAllpUWJWiTLxeOOB97cypB+fVt+vqElRlVDK39bsTNJkfXNE094JVQyqNLV1dXcc889fofxARdeeCHV1dWceeaZfoeSMCVqkSz3enEFm8v3UZeE+8s5Bve9vpUgzr8gwRLURL1gwQKGDx/O4sWL/Q4lYUrUIlnugTe39nikd1fiDt4rq+etADxX/b3veSVUMqjSt9xyC5s3b2bGjBl8+9vfPmjbtm3bmDJlCl/4wheYNm0al112GQ0N3qx4P/nJTzj11FM56aSTmDdv3oEvhcXFxcydO5fp06czc+ZMNm/eDMDtt9/OySefzPTp07nlllsAb1KViooK4OAlLzdv3sz555/Phz70IT784Q+zYcOGAzHOmDGD3NzcA7+XlpYyZ84c2k++tX9Zzfr6es4991xmzpzJySefzN/+9rcD+9x2220cf/zxzJgxgwEDBrBt27Y+f5Z96wsTkUArrW5k0cbypJ4zL8d45N0Szjwm/c/CtvfWW75e3h99qXSa17n8xS9+wZo1azpd5hJg48aN/OEPf+Css87iy1/+Mvfccw8333wzN9xwAz/60Y8A79nn5557josvvpirrrqKW265hU996lM0NTURj8dZuHAhTz/9NO+88w4DBw6ksrISgJycnE57febNm8f8+fOZPHky77zzDtdffz2vvPLKgRgHDx7cZbzt9e/fn6eeeoqhQ4dSUVHB6aefziWXXEJdXR2/+c1v2L59OwMGDOh2UY+eUKIWyWJPLd/Z+bqyfRCNO15Yu5vaplaG9s9P8tklLMaPH89ZZ50FwNVXX81dd93FzTffzKuvvsrtt99OQ0MDlZWVnHjiicyZM4edO3fyqU99CvASJcBLL73El770JQYOHAhwYFnKwsJCli9fznnnnXfgevX19SxevJjPfvazB95rbm4+ZJxXXXUVA9oWQmlsbAS8pTVvvfVWXnvtNXJycti5cyd79uxh4MCB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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(-6, 6, 1000)\n",
    "y = ss.t.pdf(x, n-1, loc = 0, scale = 1)\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.axvline(t3, color='b', linestyle='--', label = 'граница ДИ')\n",
    "plt.axvline(t_c, color='r', linestyle='--', label = 't рассчётная')\n",
    "plt.legend()\n",
    "plt.plot(x, y)\n",
    "\n",
    "xr_fill = np.linspace(-6, t3)\n",
    "yr_fill = ss.t(n-1,0, 1).pdf(xr_fill)\n",
    "plt.fill_between(xr_fill,0, yr_fill) \n",
    "print('Отвергаем гипотезу H_0 в закрашенной области')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Часть 2 ####\n",
    "\n",
    "**1. Построим диаграмму рассеяния Y от X**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10,7))\n",
    "sns.scatterplot(x = df['X'], y = df['Y'])\n",
    "plt.xlabel('Изменение расходов на социальную политику')\n",
    "plt.ylabel('Изменение ВРП')\n",
    "plt.title('Диаграмма рассеяния')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Зависимость слабо похожа на линейную"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2. Оценим линейную регрессионную модель Y на X**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.array([df.X]).reshape((-1, 1))\n",
    "y = df.Y\n",
    "model = LinearRegression().fit(x, y)\n",
    "predicted = model.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"График линейной регрессии\")\n",
    "\n",
    "plt.scatter(x, y)\n",
    "plt.plot(x, model.predict(x), color='red', linewidth=2);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>            <td>Y</td>        <th>  R-squared:         </th> <td>   0.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>  -0.010</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>  0.1982</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 11 Oct 2021</td> <th>  Prob (F-statistic):</th>  <td> 0.657</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:59:16</td>     <th>  Log-Likelihood:    </th> <td>  109.62</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    83</td>      <th>  AIC:               </th> <td>  -215.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    81</td>      <th>  BIC:               </th> <td>  -210.4</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    1.1701</td> <td>    0.047</td> <td>   24.753</td> <td> 0.000</td> <td>    1.076</td> <td>    1.264</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>X</th>         <td>   -0.0162</td> <td>    0.036</td> <td>   -0.445</td> <td> 0.657</td> <td>   -0.088</td> <td>    0.056</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>14.033</td> <th>  Durbin-Watson:     </th> <td>   2.184</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.001</td> <th>  Jarque-Bera (JB):  </th> <td>  35.431</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.438</td> <th>  Prob(JB):          </th> <td>2.02e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.079</td> <th>  Cond. No.          </th> <td>    13.6</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                      Y   R-squared:                       0.002\n",
       "Model:                            OLS   Adj. R-squared:                 -0.010\n",
       "Method:                 Least Squares   F-statistic:                    0.1982\n",
       "Date:                Mon, 11 Oct 2021   Prob (F-statistic):              0.657\n",
       "Time:                        13:59:16   Log-Likelihood:                 109.62\n",
       "No. Observations:                  83   AIC:                            -215.2\n",
       "Df Residuals:                      81   BIC:                            -210.4\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      1.1701      0.047     24.753      0.000       1.076       1.264\n",
       "X             -0.0162      0.036     -0.445      0.657      -0.088       0.056\n",
       "==============================================================================\n",
       "Omnibus:                       14.033   Durbin-Watson:                   2.184\n",
       "Prob(Omnibus):                  0.001   Jarque-Bera (JB):               35.431\n",
       "Skew:                           0.438   Prob(JB):                     2.02e-08\n",
       "Kurtosis:                       6.079   Cond. No.                         13.6\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = smf.ols('Y ~ X', data=df).fit()\n",
    "results.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Оценка модели"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3. Проверим значимость коэффициентов регрессии**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Возьемем уровень значимости равный 0.05. Если P-value коэффициента регрессии меньше, чем выбранный уровень значимости α, то нулевая гипотеза отвергается и соответствующий коэффициент  является значимым. Как можно увидеть в предыдущем пункте, *константа значима (0.000 < 0.05), а коэффициент наклона нет (0.657 > 0.05).* "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4. Итнтерпретация полученных результатов**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На основе полученных выше результатов можно довольно ясно сделать вывод о том, что переменная X практически не объяснет целевую переменную."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5. Сделаем некоторые предположения о коэффициенте наклона с экономической точки зрения**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Коэффициент наклона: -0.016175649611156428\n"
     ]
    }
   ],
   "source": [
    "print('Коэффициент наклона: ' + str(model.coef_[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как уже было сказано, рост расходов на социальную политику имеет крайне низкое влияние на рост валового регионального продукта. Согласно построенной модели, коэффициент наклона незначим и даже имеет отрицательное значение, то есть увелечение социальной политики негативно сказывается на ВРП. \n",
    "*Вряд ли это действительно так.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.03120857982826972\n"
     ]
    }
   ],
   "source": [
    "dfe = pd.read_excel('data.xlsx')\n",
    "print(dfe['Расходы консолидированных бюджетов субъектов РФ на социальную политику, в млн рублей, 2010 г.'].mean()/dfe['Валовый региональный продукт, в млн рублей, 2010 г.'].mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Такие результаты линейной регрессии скорее всего связаны с тем, что расходы на социальную политику в среднем составляют около 3% от ВРП и не могут оказать значительного влияния на целевую переменную. Возможно, существуют иные факторы, слабо коррелирующие с обучающей переменной, которые не были учтены в модели."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6. Попробуем удалить выбросы и оценить модель заново**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для удаления выбросов мы использовали z оценку с параметром 1, то есть были удалены все значения с разбросом относительно среднего значения более 1 стандартного отклонения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83 было, осталось 64 наблюдения\n"
     ]
    }
   ],
   "source": [
    "z_scores = stats.zscore(df.X)\n",
    "df['z_score'] = np.abs(z_scores)\n",
    "print('83 было, осталось', df[df.z_score < 1].shape[0], 'наблюдения')\n",
    "dfn = df[df.z_score < 1]\n",
    "xn = np.array([dfn.X]).reshape((-1, 1))\n",
    "yn = np.array(dfn['Y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 8))\n",
    "plt.subplot(1, 2, 1)\n",
    "sns.scatterplot(x=df['X'], y=df['Y'])\n",
    "plt.title('Исходные данные')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "sns.scatterplot(x=dfn['X'], y=dfn['Y'])\n",
    "plt.title('Без выбросов')\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "modeln = LinearRegression().fit(xn, yn)\n",
    "predicted = modeln.predict(xn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(xn, yn)\n",
    "plt.plot(xn, modeln.predict(xn), color='red', linewidth=2);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Коэффициент наклона: 0.005542477813941897\n"
     ]
    }
   ],
   "source": [
    "print('Коэффициент наклона: ' + str(modeln.coef_[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>            <td>Y</td>        <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>  -0.016</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>0.004180</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 11 Oct 2021</td> <th>  Prob (F-statistic):</th>  <td> 0.949</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>16:04:09</td>     <th>  Log-Likelihood:    </th> <td>  79.157</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    64</td>      <th>  AIC:               </th> <td>  -154.3</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    62</td>      <th>  BIC:               </th> <td>  -150.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    1.1457</td> <td>    0.109</td> <td>   10.467</td> <td> 0.000</td> <td>    0.927</td> <td>    1.365</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>X</th>         <td>    0.0055</td> <td>    0.086</td> <td>    0.065</td> <td> 0.949</td> <td>   -0.166</td> <td>    0.177</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 9.783</td> <th>  Durbin-Watson:     </th> <td>   2.022</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.008</td> <th>  Jarque-Bera (JB):  </th> <td>  17.962</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.389</td> <th>  Prob(JB):          </th> <td>0.000126</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.476</td> <th>  Cond. No.          </th> <td>    25.2</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                      Y   R-squared:                       0.000\n",
       "Model:                            OLS   Adj. R-squared:                 -0.016\n",
       "Method:                 Least Squares   F-statistic:                  0.004180\n",
       "Date:                Mon, 11 Oct 2021   Prob (F-statistic):              0.949\n",
       "Time:                        16:04:09   Log-Likelihood:                 79.157\n",
       "No. Observations:                  64   AIC:                            -154.3\n",
       "Df Residuals:                      62   BIC:                            -150.0\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      1.1457      0.109     10.467      0.000       0.927       1.365\n",
       "X              0.0055      0.086      0.065      0.949      -0.166       0.177\n",
       "==============================================================================\n",
       "Omnibus:                        9.783   Durbin-Watson:                   2.022\n",
       "Prob(Omnibus):                  0.008   Jarque-Bera (JB):               17.962\n",
       "Skew:                           0.389   Prob(JB):                     0.000126\n",
       "Kurtosis:                       5.476   Cond. No.                         25.2\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = smf.ols('Y ~ X', data=dfn).fit()\n",
    "results.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Оценка новой модели"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
